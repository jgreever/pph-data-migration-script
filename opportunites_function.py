import hashlib

def getOpportunityColumns():
    opportunity_columns = [
        "Id",
        "IsDeleted",
        "AccountId",
        "RecordTypeId",
        "IsPrivate",
        "Name",
        "Description",
        "StageName",
        "StageSortOrder",
        "Amount",
        "Probability",
        "ExpectedRevenue",
        "TotalOpportunityQuantity",
        "CloseDate",
        "Type",
        "NextStep",
        "LeadSource",
        "IsClosed",
        "IsWon",
        "ForecastCategory",
        "ForecastCategoryName",
        "CampaignId",
        "HasOpportunityLineItem",
        "Pricebook2Id",
        "OwnerId",
        "CreatedDate",
        "CreatedById",
        "LastModifiedDate",
        "LastModifiedById",
        "SystemModstamp",
        "LastActivityDate",
        "LastStageChangeDate",
        "FiscalYear",
        "FiscalQuarter",
        "ContactId",
        "PrimaryPartnerAccountId",
        "ContractId",
        "LastAmountChangedHistoryId",
        "LastCloseDateChangedHistoryId",
        "PatronDonate__Acknowledged__c",
        "PatronDonate__Anonymous__c",
        "PatronDonate__Application_Deadline__c",
        "PatronDonate__AmountPaid__c",
        "PatronDonate__CVV2__c",
        "PatronDonate__Card_Type__c",
        "PatronDonate__Check_Date__c",
        "PatronDonate__ParentRecord__c",
        "PatronDonate__Dedication_Acknowledgement_Type__c",
        "PatronDonate__Dedication_Honoree_Name__c",
        "PatronDonate__Dedication_Personal_Note__c",
        "PatronDonate__Dedication_Recipient_Address__c",
        "PatronDonate__Dedication_Recipient_Email_Address__c",
        "PatronDonate__Dedication_Recipient_First_Name__c",
        "PatronDonate__Dedication_Recipient_Last_Name__c",
        "PatronDonate__Dedication_Type__c",
        "PatronDonate__Donation_Matched__c",
        "PatronDonate__Donor__c",
        "PatronDonate__Error_Message__c",
        "PatronDonate__Expiration_Month__c",
        "PatronDonate__Expiration_Year__c",
        "PatronDonate__Frequency__c",
        "PatronDonate__Fund__c",
        "PatronTicket__DepositDueDate__c",
        "PatronDonate__Grant_Amount__c",
        "PatronDonate__AuthorizationCode__c",
        "PatronDonate__Matching_Close_Date__c",
        "PatronDonate__Matching_Status__c",
        "PatronDonate__Matching__c",
        "PatronDonate__Membership_Length__c",
        "PatronDonate__Membership_Start_Date__c",
        "PatronDonate__Name_On_Card__c",
        "PatronDonate__OrderNumber__c",
        "PatronDonate__Payment_Type__c",
        "PatronDonate__Reporting_Deadline__c",
        "PatronDonate__Reporting_Requirements__c",
        "PatronDonate__Status__c",
        "PatronDonate__Transaction_ID__c",
        "PatronDonate__Card_Number__c",
        "PatronDonate__CheckNumberText__c",
        "PatronDonate__LastTransactionID__c",
        "PatronTicket__TicketOrder__c",
        "PatronDonate__FiscalYearApplied__c",
        "PatronDonate__AcknowledgmentName__c",
        "PatronDonate__RecurringDonation__c",
        "PatronDonate__DonationSource__c",
        "PatronDonate__ChargebackCase__c",
        "PatronDonate__UserAgent__c",
        "PatronTicket__FullPaymentDueDate__c",
        "PatronTicket__ShowDateTime__c",
        "PatronTicket__TicketableEvent__c",
        "PatronDonate__PaymentGatewaySettings__c",
        "Pledge_Amount__c",
        "Payment_Schedule__c",
        "External_ID__c",
        "Sub_Type__c",
        "Fiscal_Year__c",
        "Grant_Ask_Amount__c",
        "Appeal__c",
        "Tax_Deductible_Amount__c",
        "Acknowledged_by_Letter__c",
        "Related_Campaign__c",
        "PatronDonate__DonationForm__c",
        "PatronDonate__StoredPaymentMethod__c",
        "PatronDonate__DonationSoftCredited__c",
        "PatronDonate__GeneralLedgerCode__c",
        "PatronDonate__TaxDeductibleAmount__c",
        "PatronDonate__CreditCardBIN__c",
        "Application_Submitted__c",
        "Report_Submitted__c",
        "PatronDonate__LastStatus__c",
        "Ticket_Quantity__c",
        "Appeal_Donation_Form_Only__c",
        "Additional_Donation__c",
        "PatronDonate__CreditCardTransactionFee__c",
        "Fund_Specific__c",
        "Hallowed_Ground_Attendance__c",
        "Publicity_Requirements__c",
        "First_gift__c",
        "PatronDonate__CreditCardEntryMethod__c",
        "PatronDonate__CreditCardLastFour__c",
        "Ticket_Quantity_2__c",
        "Anniversary_Party_Tickets__c",
        "Youth_Guests__c",
        "PatronTicket__TicketOrderItem__c"
    ]
    return opportunity_columns


def get_merging_dictionary():
    mergeDict = {
        "Id": "opportunity_id",
        "IsDeleted": "is_deleted",
        "AccountId": "accountid",
        "RecordTypeId": "record_type_id",
        "IsPrivate": "is_private",
        "Name": "name",
        "Description": "description",
        # "StageName": "stage_name",
        # "StageSortOrder": "stage_sort_order",
        "Amount": "amount",
        # "Probability"
        # "ExpectedRevenue",
        # "TotalOpportunityQuantity",
        "CloseDate": "close_date",
        "Type": "type",
        # "NextStep",
        # "LeadSource",
        # "IsClosed",
        # "IsWon",
        # "ForecastCategory",
        # "ForecastCategoryName",
        "CampaignId": "campaign_id",
        # "HasOpportunityLineItem",
        # "Pricebook2Id",
        "OwnerId": "owner_id",
        "CreatedDate": "created_date",
        # "CreatedById",
        "LastModifiedDate": "last_modified_date",
        # "LastModifiedById",
        # "SystemModstamp",
        # "LastActivityDate",
        # "LastStageChangeDate",
        "FiscalYear": "fiscal_year",
        "FiscalQuarter": "fiscal_quarter",
        "ContactId": "contactid",
        # "PrimaryPartnerAccountId",
        # "ContractId",
        # "LastAmountChangedHistoryId",
        # "LastCloseDateChangedHistoryId",
        # "PatronDonate__Acknowledged__c",
        "PatronDonate__Anonymous__c": "is_anonymous",
        # "PatronDonate__Application_Deadline__c",
        "PatronDonate__AmountPaid__c": "amount_paid",
        # "PatronDonate__CVV2__c",
        # "PatronDonate__Card_Type__c",
        # "PatronDonate__Check_Date__c",
        # "PatronDonate__ParentRecord__c",
        # "PatronDonate__Dedication_Acknowledgement_Type__c",
        "PatronDonate__Dedication_Honoree_Name__c": "dedication_honoree_name",
        # "PatronDonate__Dedication_Personal_Note__c",
        # "PatronDonate__Dedication_Recipient_Address__c",
        # "PatronDonate__Dedication_Recipient_Email_Address__c",
        # "PatronDonate__Dedication_Recipient_First_Name__c",
        # "PatronDonate__Dedication_Recipient_Last_Name__c",
        "PatronDonate__Dedication_Type__c": "dedication_type",
        # "PatronDonate__Donation_Matched__c",
        "PatronDonate__Donor__c": "donor_id",
        # "PatronDonate__Error_Message__c",
        # "PatronDonate__Expiration_Month__c",
        # "PatronDonate__Expiration_Year__c",
        # "PatronDonate__Frequency__c",
        "PatronDonate__Fund__c": "fund_type",
        # "PatronTicket__DepositDueDate__c",
        "PatronDonate__Grant_Amount__c": "grant_amount",
        # "PatronDonate__AuthorizationCode__c",
        # "PatronDonate__Matching_Close_Date__c",
        # "PatronDonate__Matching_Status__c",
        # "PatronDonate__Matching__c",
        # "PatronDonate__Membership_Length__c",
        # "PatronDonate__Membership_Start_Date__c",
        # "PatronDonate__Name_On_Card__c",
        # "PatronDonate__OrderNumber__c",
        "PatronDonate__Payment_Type__c": "payment_type",
        # "PatronDonate__Reporting_Deadline__c",
        # "PatronDonate__Reporting_Requirements__c",
        # "PatronDonate__Status__c",
        # "PatronDonate__Transaction_ID__c",
        # "PatronDonate__Card_Number__c",
        # "PatronDonate__CheckNumberText__c",
        # "PatronDonate__LastTransactionID__c",
        # "PatronTicket__TicketOrder__c",
        # "PatronDonate__FiscalYearApplied__c",
        # "PatronDonate__AcknowledgmentName__c",
        # "PatronDonate__RecurringDonation__c",
        # "PatronDonate__DonationSource__c",
        # "PatronDonate__ChargebackCase__c",
        # "PatronDonate__UserAgent__c",
        # "PatronTicket__FullPaymentDueDate__c",
        # "PatronTicket__ShowDateTime__c",
        # "PatronTicket__TicketableEvent__c",
        # "PatronDonate__PaymentGatewaySettings__c",
        # "Pledge_Amount__c",
        # "Payment_Schedule__c",
        # "External_ID__c",
        "Sub_Type__c": "sub_type",
        "Fiscal_Year__c": "fiscal_year_season",
        "Grant_Ask_Amount__c": "grant_ask_amount",
        "Appeal__c": "appeal",
        "Tax_Deductible_Amount__c": "tax_deductible_amount",
        "Acknowledged_by_Letter__c": "acknowledged_by_letter",
        # "Related_Campaign__c",
        # "PatronDonate__DonationForm__c",
        # "PatronDonate__StoredPaymentMethod__c",
        # "PatronDonate__DonationSoftCredited__c",
        # "PatronDonate__GeneralLedgerCode__c",
        # "PatronDonate__TaxDeductibleAmount__c",
        # "PatronDonate__CreditCardBIN__c",
        # "Application_Submitted__c",
        # "Report_Submitted__c",
        # "PatronDonate__LastStatus__c",
        # "Ticket_Quantity__c",
        # "Appeal_Donation_Form_Only__c",
        # "Additional_Donation__c",
        # "PatronDonate__CreditCardTransactionFee__c",
        # "Fund_Specific__c",
        # "Hallowed_Ground_Attendance__c",
        # "Publicity_Requirements__c",
        # "First_gift__c",
        # "PatronDonate__CreditCardEntryMethod__c",
        # "PatronDonate__CreditCardLastFour__c",
        # "Ticket_Quantity_2__c",
        # "Anniversary_Party_Tickets__c",
        # "Youth_Guests__c",
        # "PatronTicket__TicketOrderItem__c"
    }
    return mergeDict

def getNewOpportunityColumnsOrder(df):
    # Hash all ID columns
    id_columns = ['opportunity_id', 'accountid', 'record_type_id', 'contactid', 'campaign_id', 'owner_id', 'donor_id']
    for col in id_columns:
        if col in df.columns:
            df[col] = df[col].apply(lambda x: hash_to_int(x))

    # Define the new column order with logical grouping
    new_column_order = [
        # Opportunity Identifiers
        'opportunity_id',
        'accountid',
        'record_type_id',
        'contactid',
        'campaign_id',
        'owner_id',

        # Opportunity Basic Info
        'name',
        'description',
        'amount',
        'close_date',
        'type',

        # Opportunity Status and Details
        'is_deleted',
        'is_private',
        'created_date',
        'last_modified_date',
        'fiscal_year',
        'fiscal_quarter',

        # Donation Information
        'is_anonymous',
        'amount_paid',
        'dedication_honoree_name',
        'dedication_type',
        'donor_id',
        'fund_type',
        'grant_amount',
        'payment_type',

        # Additional Financial Information
        'sub_type',
        'fiscal_year_season',
        'grant_ask_amount',
        'appeal',
        'tax_deductible_amount',
        'acknowledged_by_letter',
    ]

    # Reorder the DataFrame columns
    df = df[new_column_order]

    return df

def hash_to_int(column_value, mod_value=2**32):
    hash_object = hashlib.sha256(str(column_value).encode())
    hex_hash = hash_object.hexdigest()
    int_hash = int(hex_hash, 16) % mod_value
    return int_hash
