import hashlib

def getAccountsColumns():
    header_columns = ['Id',
    'IsDeleted',
    'MasterRecordId',
    'Name',
    'Type',
    'RecordTypeId',
    'ParentId',
    'BillingStreet',
    'BillingCity',
    'BillingState',
    'BillingPostalCode',
    'BillingCountry',
    'BillingLatitude',
    'BillingLongitude',
    'BillingGeocodeAccuracy',
    'ShippingStreet',
    'ShippingCity',
    'ShippingState',
    'ShippingPostalCode',
    'ShippingCountry',
    'ShippingLatitude',
    'ShippingLongitude',
    'ShippingGeocodeAccuracy',
    'Phone',
    'Fax',
    'AccountNumber',
    'Website',
    'Sic',
    'Industry',
    'AnnualRevenue',
    'NumberOfEmployees',
    'Ownership',
    'TickerSymbol',
    'Description',
    'Rating',
    'Site',
    'OwnerId',
    'CreatedDate',
    'CreatedById',
    'LastModifiedDate',
    'LastModifiedById',
    'SystemModstamp',
    'LastActivityDate',
    'Jigsaw',
    'JigsawCompanyId',
    'AccountSource',
    'SicDesc',
    'PatronDonate__Date_Entered__c',
    'PatronDonate__Do_not_call__c',
    'PatronDonate__Do_not_mail__c',
    'PatronDonate__Donation_Level__c',
    'PatronDonate__Donor_Recognition__c',
    'PatronDonate__Email__c',
    'PatronDonate__Endowment__c',
    'PatronDonate__External_ID__c',
    'PatronDonate__Formal_Address_Name__c',
    'PatronDonate__Formal_Salutation__c',
    'PatronDonate__Grant_Application_Website__c',
    'PatronDonate__HasOptedOutOfEmail__c',
    'PatronDonate__Informal_Address_Name__c',
    'PatronDonate__Informal_Salutation__c',
    'PatronDonate__Match_Ratio__c',
    'PatronDonate__Matching_Gift_Website__c',
    'PatronDonate__Max_Match__c',
    'PatronDonate__Max_Per_Employee__c',
    'PatronDonate__Min_Match__c',
    'PatronDonate__Note__c',
    'Attn__c',
    'PatronDonate__Please_note2__c',
    'PatronDonate__Please_note__c',
    'PatronDonate__Typical_Grant_Size__c',
    'PatronDonate__Will_Give_To__c',
    'PatronDonate__First_Donation_Date__c',
    'PatronDonate__Last_Donation_Date__c',
    'PatronDonate__Lifetime_Donation_History_Amount__c',
    'PatronDonate__Lifetime_Donation_History_Number__c',
    'PatronDonate__This_Year_Donation_History_Amount__c',
    'PatronDonate__Amount_Donated_This_Fiscal_Year__c',
    'PatronDonate__AmountDonatedInLastNDays__c',
    'PatronDonate__GivingCapacity__c',
    'PatronDonate__GivingReadiness__c',
    'PatronDonate__InclinationToGive__c',
    'PatronDonate__LastDonationAmount__c',
    'PatronTicket__FiscalYearMembershipAmount__c',
    'PatronTicket__FiscalYearOrderCount__c',
    'PatronTicket__FiscalYearSingleTicketAmount__c',
    'PatronTicket__FiscalYearSubscriptionAmount__c',
    'PatronTicket__LastNDaysMembershipAmount__c',
    'PatronTicket__LastNDaysOrderCount__c',
    'PatronTicket__LastNDaysSingleTicketAmount__c',
    'PatronTicket__LastNDaysSubscriptionAmount__c',
    'PatronTicket__LifetimeMembershipAmount__c',
    'PatronTicket__LifetimeOrderCount__c',
    'PatronTicket__LifetimeSingleTicketAmount__c',
    'PatronTicket__LifetimeSubscriptionAmount__c',
    'Board_Member__c',
    'Show_Sponsor__c',
    'Seating_Accommodation__c',
    'Amount_Donated_CY20__c',
    'Amount_Donated_CY18__c',
    'Sort_Name__c',
    'PatronSignup__ManualSortName__c',
    'PatronDonate__AmountDonatedLastFiscalYear__c',
    'Amount_Donated_CY21__c',
    'Amount_Donated_CY19__c',
    'Amount_Donated_FY20__c',
    'Amount_Donated_FY19__c',
    'Amount_Donated_FY18__c',
    'Lifetime_Donations_Included_Pledged__c',
    'First_Donation_Date_Incl_Pledged__c',
    'Amount_Donated_FY21__c',
    'PatronDonate__FirstDonationAmount__c',
    'PatronDonate__LargestDonationDate__c',
    'Amount_Donated_FY22__c',
    'PatronTicket__SubscriberBadgeRollup__c',
    'DLRS_First_Purchased_Event_Date__c',
    'PatronTicket__LatestAccountMembership__c',
    'PatronTicket__LatestMembershipExpiration__c',
    'Amount_Donated_FY23__c',
    'Amount_Donated_FY24__c'
    ]

    return header_columns

def get_merging_dictionary():
    merging_dictionary = {
    'Id': 'account_id',
    'IsDeleted': 'is_deleted',
#    'MasterRecordId': None,
    'Name': 'name',
    'Type': 'type',
#    'RecordTypeId': None,
#    'ParentId': None,
#    'BillingStreet': None,   All billing information will be handled outside of PPH application.
#    'BillingCity': None,
#    'BillingState': None,
#    'BillingPostalCode': None,
#    'BillingCountry': None,
#    'BillingLatitude': None,
#    'BillingLongitude': None,
#    'BillingGeocodeAccuracy': None,
    'ShippingStreet': 'shipping_street',
    'ShippingCity': 'shipping_city',
    'ShippingState': 'shipping_state',
    'ShippingPostalCode': 'shipping_postal_code',
    'ShippingCountry': 'shipping_country',
#    'ShippingLatitude': None,
#    'ShippingLongitude': None,
#    'ShippingGeocodeAccuracy': None,
    'Phone': 'phone',
    'Fax': 'fax',
#    'AccountNumber': None,
    'Website': 'website',
#    'Sic': None,
#    'Industry': None,
#    'AnnualRevenue': None,
#    'NumberOfEmployees': None,
#    'Ownership': None,
#    'TickerSymbol': None,
#    'Description': None,
#    'Rating': None,
#    'Site': None,
#    'OwnerId': None,
    'CreatedDate': 'created_date',
#    'CreatedById': None, Reason: Sales force Specific
    'LastModifiedDate': 'last_modified_date',
    'LastModifiedById': 'last_modified_by_id',
#    'SystemModstamp': None,
    'LastActivityDate': 'last_activity_date',
#    'Jigsaw': None,
#    'JigsawCompanyId': None,
#    'AccountSource': None,
#    'SicDesc': None,
#    'PatronDonate__Date_Entered__c': None,
    'PatronDonate__Do_not_call__c': 'do_not_call',
    'PatronDonate__Do_not_mail__c': 'do_not_mail',
#    'PatronDonate__Donation_Level__c': None,
    'PatronDonate__Donor_Recognition__c': 'donor_recognition',
    'PatronDonate__Email__c': 'donor_email',
#    'PatronDonate__Endowment__c': None,
#    'PatronDonate__External_ID__c': None,
#    'PatronDonate__Formal_Address_Name__c': None,
    'PatronDonate__Formal_Salutation__c': 'formal_salutation',
#    'PatronDonate__Grant_Application_Website__c': None,
    'PatronDonate__HasOptedOutOfEmail__c': 'has_opted_out_of_email',
    'PatronDonate__Informal_Address_Name__c': 'informal_address_name',
    'PatronDonate__Informal_Salutation__c': 'informal_salutation',
#    'PatronDonate__Match_Ratio__c': None,
#    'PatronDonate__Matching_Gift_Website__c': None,
#    'PatronDonate__Max_Match__c': None,
#    'PatronDonate__Max_Per_Employee__c': None,
#    'PatronDonate__Min_Match__c': None,
#    'PatronDonate__Note__c': None,
    'Attn__c': 'attn',
#    'PatronDonate__Please_note2__c': None,
#    'PatronDonate__Please_note__c': None,
    'PatronDonate__Typical_Grant_Size__c': 'grant_size',
    'PatronDonate__Will_Give_To__c': 'will_give_to',
    'PatronDonate__First_Donation_Date__c': 'first_donation_date',
    'PatronDonate__Last_Donation_Date__c': 'last_donation_date',
    'PatronDonate__Lifetime_Donation_History_Amount__c': 'lifetime_donation_history_amount',
    'PatronDonate__Lifetime_Donation_History_Number__c': 'lifetime_donation_number',
    'PatronDonate__This_Year_Donation_History_Amount__c': 'this_year_donation_history_amount',
    'PatronDonate__Amount_Donated_This_Fiscal_Year__c': 'amount_donated_this_fiscal_year',
#    'PatronDonate__AmountDonatedInLastNDays__c': None,
#    'PatronDonate__GivingCapacity__c': None,
#    'PatronDonate__GivingReadiness__c': None,
#    'PatronDonate__InclinationToGive__c': None,
    'PatronDonate__LastDonationAmount__c': 'last_donation_amount',
#    'PatronTicket__FiscalYearMembershipAmount__c': None,
#    'PatronTicket__FiscalYearOrderCount__c': None,
#    'PatronTicket__FiscalYearSingleTicketAmount__c': None,
#    'PatronTicket__FiscalYearSubscriptionAmount__c': None,
#    'PatronTicket__LastNDaysMembershipAmount__c': None,
#    'PatronTicket__LastNDaysOrderCount__c': None,
#    'PatronTicket__LastNDaysSingleTicketAmount__c': None,
#    'PatronTicket__LastNDaysSubscriptionAmount__c': None,
#    'PatronTicket__LifetimeMembershipAmount__c': None,
#    'PatronTicket__LifetimeOrderCount__c': 'lifetimeodercount',
    'PatronTicket__LifetimeSingleTicketAmount__c': 'lifetime_single_ticket_amount',
    'PatronTicket__LifetimeSubscriptionAmount__c': 'lifetime_subscription_amount',
    'Board_Member__c': 'board_member',
    'Show_Sponsor__c': 'show_sponsor',
    'Seating_Accommodation__c': 'seating_accomodation',
    'Amount_Donated_CY20__c': 'amount_donated_CY20',
    'Amount_Donated_CY18__c': 'amount_donated_CY18',
    'Sort_Name__c': 'sort_name',
#    'PatronSignup__ManualSortName__c': None,
    'PatronDonate__AmountDonatedLastFiscalYear__c': 'amount_donated_last_fiscal_year',
    'Amount_Donated_CY21__c': 'amount_donated_CY21',
    'Amount_Donated_CY19__c': 'amount_donated_CY19',
    'Amount_Donated_FY20__c': 'amount_donated_FY20',
    'Amount_Donated_FY19__c': 'amount_donated_FY19',
    'Amount_Donated_FY18__c': 'amount_donated_FY18',
    'Lifetime_Donations_Included_Pledged__c': 'lifetime_donations_included_pledged',
    'First_Donation_Date_Incl_Pledged__c': 'first_donation_date_incl_pledged',
    'Amount_Donated_FY21__c': 'amount_donated_FY21',
    'PatronDonate__FirstDonationAmount__c': 'first_donation_amount',
    'PatronDonate__LargestDonationDate__c': 'largest_donation_date',
    'Amount_Donated_FY22__c': 'amount_donated_FY22',
#    'PatronTicket__SubscriberBadgeRollup__c',
#    'DLRS_First_Purchased_Event_Date__c',
#    'PatronTicket__LatestAccountMembership__c',
#    'PatronTicket__LatestMembershipExpiration__c',
    'Amount_Donated_FY23__c': 'amount_donated_FY23',
    'Amount_Donated_FY24__c': 'amount_donated_FY24',
    }
       
    return merging_dictionary

def GetNewColumnsOrder(df):

    # Apply hashing to the 'id' column
    df['account_id'] = df['account_id'].apply(lambda x: hash_to_int(x))
    df['last_modified_by_id'] = df['last_modified_by_id'].apply(lambda x: hash_to_int(x))

    # Define the new column order with logical grouping and comments for readability
    new_column_order = [
        # Basic Identifiers
        'account_id', 'name', 'type',

        # Contact Information
        'phone', 'fax', 'website',
        'donor_email',

        # Shipping Address
        'shipping_street', 'shipping_city', 'shipping_state',
        'shipping_postal_code', 'shipping_country',

        # Donation Information
        'first_donation_date', 'last_donation_date',
        'lifetime_donation_history_amount', 'lifetime_donation_number',
        'this_year_donation_history_amount', 'amount_donated_this_fiscal_year',
        'last_donation_amount', 'first_donation_amount',
        'largest_donation_date',

        # Yearly Donation Details
        'amount_donated_CY18', 'amount_donated_CY19', 'amount_donated_CY20', 'amount_donated_CY21',
        'amount_donated_FY18', 'amount_donated_FY19', 'amount_donated_FY20', 'amount_donated_FY21',
        'amount_donated_FY22', 'amount_donated_FY23', 'amount_donated_FY24',
        'amount_donated_last_fiscal_year',

        # Communication Preferences
        'do_not_call', 'do_not_mail', 'has_opted_out_of_email',

        # Personalization
        'formal_salutation', 'informal_salutation', 'informal_address_name',
        'attn',

        # Patron Specifics
        'board_member', 'show_sponsor', 'seating_accomodation', 'sort_name',
        'grant_size', 'will_give_to', 'donor_recognition',

        # System-Related Fields
        'is_deleted', 'created_date', 'last_modified_date', 'last_modified_by_id', 'last_activity_date',
        'lifetime_donations_included_pledged', 'first_donation_date_incl_pledged',

        # Ticketing Information
        'lifetime_single_ticket_amount', 'lifetime_subscription_amount'
    ]

    # Reorder the DataFrame columns
    df = df[new_column_order]

    return df

def hash_to_int(column_value, mod_value=2**32):
    # Create a SHA-256 hash of the column value
    hash_object = hashlib.sha256(str(column_value).encode())
    # Convert the hash to a hexadecimal string
    hex_hash = hash_object.hexdigest()
    # Convert the hexadecimal string to an integer and modulate it
    int_hash = int(hex_hash, 16) % mod_value
    return int_hash